# This is my first attempt in a VERY long time at coding for the OHRRPGCE. 
# Things might be a bit messy, but everything here is done in the order I recalled these. 
# Rather; The easiest stuff to code in first. The essentials. I might need help with this later. 
# Without further ado.. [Spazman -- 5/1/2021]
# Rue starting on 2/19/2022

include, xenophage_arrays.hss
include, xenophage_mobs.hss
include, xenophage_globals.hss

script, zoneatpixel, x, y, count=0, begin
	return(zone at spot(x/20, y/20, count))
end

script, wall at pixel, x, y, begin
    x := x / 20
    y := y / 20
    if (read pass block (x, y)) then (
    	return (true)
    )
    else (
    	return (false)
    )
end



script, tickFrameCount, begin
	framecount:=framecount+1
	if (framecount>2147483640) then (framecount:=1)
end


script, gameloop, begin
	subscript, tickEvent, begin
		# Check inputs and key changes.
		# Check and change object states.
		#updateCamera()
		placeplayerathero()
		check_keys()
		check_debug_keys()
		handlePlayerJump()
		fallPlayer()
	end

	subscript, drawEvent, begin
		# Check image states and change image states.
		#set script "gameloop" to run in 1 tick again.
	end

	set timer (timer:gameloop, 1, 1, @gameloop)
	tickEvent()
	drawEvent()
end

script, placeplayerathero, begin
	# TODO: Remove this. This is a terrible system.
	# Let's go back to having the hero just be a spawn point.
	# Currently this is very janky and makes the player slice bounce around all weird.
	put slice(player_slice,hero pixel x(me),hero pixel y(me))
	
end
script, get_anim_frame,first,last,spd, begin
	variable (retval, cell_num)
	retval:=framecount / spd
	cell_num:=retval,mod,((last -- first)+1) # This will return just which cell number, but not the actual sprite to play.
	retval:= first + cell_num
	return (retval)
end

script, check_keys, begin
	if (key is pressed(key:A)) then (
		# try to move left
		movePlayer(left)
	)
	if (key is pressed(key:D)) then (
		# try to move right
		movePlayer(right)
	)
	if (key is pressed(key:Space)) then (
		# try to jump
		launchPlayerJump()
	)
end

script, sliceisoncollision,sl, useparent=false,begin
	if (useparent==true) then (
		return (wallatpixel(slice x(sl)+slice x(slice parent(sl)),slice y(sl)+slice y(slice parent(sl))))
	)
	else (
		return (wallatpixel(slice x(sl),slice y(sl)))
	)
end

script, launchPlayerJump, begin
	# This just checks to see if you _can_ jump, and then puts you in jumping mode.
	variable (grounded)
	grounded:=sliceisoncollision(getCollider(player_slice,down),true)

	if (grounded==true) then (
		if (xisjumping(player_slice) == 0 && xisfalling(player_slice) == 0) then (
			xsetcurrentjumphangtime(player_slice,0)
			xisjumping(player_slice,1)
		)
	)
end

script, handlePlayerJump, begin
	variable (headbonk)
	headbonk:=sliceisoncollision(getCollider(player_slice,up),true)


	if (xisJumping(player_slice)) then (
		if (xgetcurrentjumphangtime(player_slice) < xgetmaxjumphangtime(player_slice)) then (
			put hero(me,hero pixel x(me) hero pixel y(me)--xgetjumpspeed(player_slice))
		)


		if (xgetcurrentjumphangtime(player_slice) >= xgetmaxjumphangtime(player_slice)) then (
			xisjumping(player_slice,0)
		)

		if (headbonk == True) then (
			xisjumping(player_slice,0)
		)
		xsetcurrentjumphangtime(player_slice,xgetcurrentjumphangtime(player_slice)+1)
	)
end

script, fallPlayer, begin
	variable (grounded)
	grounded:=sliceisoncollision(getCollider(player_slice,down),true)
	if (grounded == false) then (
		if (xisjumping(player_slice) == false) then (
			put hero(me,hero pixel x(me) hero pixel y(me)+xgetfallspeed(player_slice))
		)
	)

end

script, movePlayer, dir, amount=4,begin
 	variable (leftCollider)
	variable (rightCollider)
 	variable (upCollider)
 	variable (downCollider)
 	
 	leftCollider:=getCollider(player_slice,left)
	rightCollider:=getCollider(player_slice,right)
	upCollider:=getCollider(player_slice,up)
 	downCollider:=getCollider(player_slice,down)
 	if (dir == left) then(
		if (sliceisoncollision(leftCollider,true) == false) then (
			put hero (me,hero pixel x(me)--amount, hero pixel y(me))
			return (true)
		)
		else (return (false))
	)

	if (dir == right) then(
		if (sliceisoncollision(rightCollider,true) == false) then (
			put hero (me,hero pixel x(me)+amount, hero pixel y(me))
			return (true)
		)
		else (return (false))
	)
end

script, check_debug_keys, begin
	if (key is pressed(key:Shift) && key is pressed(key:A)) then (
		$1 = "Animation Frame: %d"
		string sprintf(0, 1, get_anim_frame(xgetanimationfirstframe(player_slice),xgetanimationlastframe(player_slice),xgetanimationspeed(player_slice)))
		show string (0)
	)

	# if (key is pressed(key:Shift) && key is pressed(key:G)) then (
	#	$1 = "Player is on ground: %d"
	#	string sprintf(0, 1, is_player_on_ground)
    #	show string (0)
	# )
	if (key is pressed(key:Shift) && key is pressed(key:J)) then (
		$1 = "Player is jumping: %d"
		string sprintf(0, 1, xisjumping(player_slice))
		show string (0)
	)
	if (key is pressed(key:Shift) && key is pressed(key:F)) then (
		$1 = "Player is falling: %d"
		string sprintf(0, 1, xisjumping(player_slice))
		show string (0)
	)
	if (key is pressed(key:Shift) && key is pressed(key:R)) then (
		$1 = "Player is running: %d"
		string sprintf(0, 1, xisrunning(player_slice))
		show string (0)
	)

	if (key is pressed(key:Shift) && key is pressed(key:I)) then (
		$1 = "Player is idle: %d"
		string sprintf(0, 1, xisidle(player_slice))

		show string (0)
	)
	
	if (key is pressed(key:Shift) && key is pressed(key:Z)) then (
		$1 = "Zone at position: %d"
		#show value (read zone (1, slice x(sl)/20, slice y(sl)/20+1))
		show string (0)
	)
	
	if (key is pressed(key:Shift) && key is pressed(key:N)) then (
		show no value
	)
	if (new keypress(key:Left Bracket)) then (
		$1 = "Debug slowdown decreased: %d"
		debug_slowdown:=debug_slowdown--1 
		string sprintf(0, 1, debug_slowdown)
		show string (0)
	)
	if (new keypress(key:Right Bracket)) then (
		$1 = "Debug slowdown increased: %d"
		debug_slowdown:=debug_slowdown+1 
		string sprintf(0, 1, debug_slowdown)
		show string (0)
	)

end

plotscript, defnewgame, begin
	gameloaded:=0
	ob_size:=setupArrayDefinitions()
	initiateMobs()
	debug_slowdown:=0
	framecount:=1
	init mouse
	suspend player
	#start the game loop
	wait(1)
	create_player() # this actually sets player_slice
	createMobCollider(player_slice)
	gameloop()
end
