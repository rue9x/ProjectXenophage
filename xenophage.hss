# This is my first attempt in a VERY long time at coding for the OHRRPGCE. 
# Things might be a bit messy, but everything here is done in the order I recalled these. 
# Rather; The easiest stuff to code in first. The essentials. I might need help with this later. 
# Without further ado.. [Spazman -- 5/1/2021]
# Rue starting on 2/19/2022

include, xenophage_arrays.hss

define constant, begin
	#lookup constants
	#timer constants
	0, timer:gameloop
end

global variable, begin
	0, game:state,
	1, player_slice,
	2, framecount,
	3, debug_slowdown
	4, ob_size
	5, gameloaded
end


plotscript, create_player, begin
	player_slice:=load sprite (spritetype:large enemy, 0, 0)
	set parent(player_slice,lookup slice(sl:walkabout layer))
	resize extra(player_slice,ob_size)
	xsetCurrentDirection(player_slice,1)
	xsetrunspeed(player_slice,8) # How fast the player stops moving.
	xsetjumpspeed(player_slice,8)
	xsetcurrenthorizontalspeed(player_slice,0)
	xsetCurrentVelocity(player_slice,3) # how fast the player moves
	xsetfallspeed(player_slice,10)
	xsetmaxjumphangtime(player_slice,15)
	xsetcurrentjumphangtime(player_slice,0)
	xsethangtimetiming(player_slice,9)
	xsetimagepalettenumber(player_slice,12)
	xsetrunanimationfirstframe(player_slice,17)
	xsetrunanimationlastframe(player_slice,17)
	xsetidleanimationfirstframe(player_slice,9)
	xsetidleanimationlastframe(player_slice,15)
	xsetCurrentFrame(player_slice,0)
	xsetanimationspeed(player_slice,3)
	xisidle(player_slice,1)
	replace sprite (player_slice, spritetype:large enemy, xgetIdleanimationfirstframe(player_slice), xgetimagepalettenumber(player_slice))

end




plotscript, enterNewArea, begin
	create_player()
	set slice x(player_slice,hero pixel x(me))
	set slice y(player_slice,hero pixel y(me))
	gameloaded:=1
end


script, updateCamera, begin
	camera follows slice(player_slice)
end

script, entityJumpMovement, sl,speed,begin
	set slice velocity y(player_slice,0--xgetcurrentvelocity(player_slice),xgetCurrentJumpHangtime(player_slice))
	#move slice with wallchecking (sl, 0, 0--speed,100)
end

script, entityHorizontalMovement, sl,dir,speed,begin
	if (dir > 0) then (
		set slice velocity x(player_slice,xgetcurrentvelocity(player_slice),xgetrunspeed(player_slice))
	)
	else (
		set slice velocity x(player_slice,0--xgetcurrentvelocity(player_slice),xgetrunspeed(player_slice))
	)
end

script, entityFallMovement, sl, speed, begin
	set slice velocity y(player_slice,xgetcurrentvelocity(player_slice),xgetcurrentjumphangtime(player_slice))
	#move slice with wallchecking (sl, 0, speed, 100)
end

script, updatePlayerState, begin
	if (get slice velocity x (player_slice) <> 0) then (
		xisrunning(player_slice,1)
	)
	else (
		xisrunning(player_slice,0)
	)

	if (get slice velocity y (player_slice) < 0 && is_player_on_ground == 0) then (
		xisjumping(player_slice,1)
	)
	else (
		xisjumping(player_slice,0)
	)
	

	if (get slice velocity y (player_slice) > 0) then (
		xisfalling(player_slice,1)
	)
	else (
		xisfalling(player_slice,1)
	)

end


script, tickFrameCount, begin
	framecount:=framecount+1
	if (framecount>2147483640) then (framecount:=1)
end


script, checkSliceForIncomingCollision, sl, begin
	variable (new_x)
	variable (new_y)
	variable (old_x)
	variable (old_y)
	variable (retval)
	retval:=0
	old_x:=slice screen x(sl)*20
	old_y:=slice screen y(sl)*20
	new_x:=slice screen x(sl)*20
	new_y:=slice screen y(sl)
	new_x:=new_x+get slice velocity x(sl)
	new_y:=new_y+get slice velocity y(sl)
	if ( check wall collision x (old_x, old_y, slice width(sl), slice height(sl), new_x--old_x, new_y--old_y, 0) < get slice velocity x (sl)) then (
		retval:=retval+1
		if ( check wall collision y (old_x, old_y, slice width(sl), slice height(sl), new_x--old_x, new_y--old_y, 0) < get slice velocity y (sl)) then (
			retval:=retval+2		
		)
		return (retval) # 0 there is nothing, 1 horiz wall, 2 there is a vert wall, 3 there is both
	)
end

script, gameloop, begin
	subscript, tickEvent, begin
		# Check inputs and key changes.
		# Check and change object states.
		variable (wallcheck)
		keypress_handler()
		updatePlayerstate()
		wallcheck:=checkSliceForIncomingCollision(player_slice)

		if (wallcheck == 1) then (
			set slice velocity x (player_slice, 0, 0)
		)


		if (wallcheck == 2) then (
			set slice velocity y (player_slice, 0, 0)
		) 

		if (wallcheck == 3) then (
			set slice velocity x (player_slice, 0, 0)
			set slice velocity y (player_slice, 0, 0)
		) 
		update_player_gravity()	
		updateCamera()

	end


	subscript, drawEvent, begin
		# Check image states and change image states.
		tickFrameCount()
		if (xgetCurrentDirection(player_slice) == -1) then (
			horiz flip sprite (player_slice, true)
		)
		if (xgetCurrentDirection(player_slice) == 1) then (
			horiz flip sprite (player_slice, false)
		)

		if (xisidle(player_slice) == 1) then (
			replace sprite (player_slice, spritetype: large enemy, get_anim_frame(xgetIdleanimationfirstframe(player_slice),xgetidleanimationlastframe(player_slice),xgetanimationspeed(player_slice)), xgetimagepalettenumber(player_slice))
		)
		if (xisrunning(player_slice) == 1) then (
			replace sprite (player_slice, spritetype: large enemy, get_anim_frame(xgetrunanimationfirstframe(player_slice),xgetrunanimationlastframe(player_slice),xgetanimationspeed(player_slice)), xgetimagepalettenumber(player_slice))
		)
	end



	#set script "gameloop" to run in 1 tick again.
	wait (debug_slowdown)
	set timer (timer:gameloop, 1, 1, @gameloop)
	if (gameloaded ==1) then (
		tickEvent()
		drawEvent()
	)
end

script, get_anim_frame,first,last,spd, begin
	variable (retval, cell_num)
	retval:=framecount / spd
	cell_num:=retval,mod,((last -- first)+1) # This will return just which cell number, but not the actual sprite to play.
	retval:= first + cell_num
	return (retval)
end


script, keypress_handler, begin
	variable (horizontal_key)
	horizontal_key:= check_horizontal_keypress()
	if (horizontal_key > 0 || horizontal_key < 0) then (
		xsetcurrentdirection(player_slice,horizontal_key)
		entityHorizontalMovement(player_slice,xgetcurrentdirection(player_slice),xgetrunspeed(player_slice))
	)
	check_debug_keys()
end

script, update_player_gravity, begin
	if (is_player_on_ground == 0 && xisjumping(player_slice) == 0 && xisfalling(player_slice) == 1) then (
		entityFallMovement(player_slice,xgetfallspeed(player_slice))
	)
	if (is_player_on_ground == 0 && xisjumping(player_slice) == 1 && xisfalling(player_slice) == 0) then (
		entityJumpMovement(player_slice,xgetjumpspeed(player_slice))
	)	
end

script, is_player_on_ground, begin
	variable (retval)
	retval:=check wall collision y(slice x(player_slice), slice y(player_slice), slice width(player_slice), slice height(player_slice), 0, slice height(player_slice))
	if (retval > 0) then (return (0))
	if (retval == 0) then (return (1))
	
end

script, check_jump_keypress, begin
	variable (retval)
	retval:=0

	if (key is pressed(key:SPACE)) then (
		retval:=1
	)

	return (retval)
end

script, check_horizontal_keypress, begin
	variable (retval)
	retval:=0
	if (key is pressed (key:A)) then (
			retval:=-1
	)
	if (key is pressed (key:D)) then (
			retval:=1
	)
	return (retval)
end

script, check_debug_keys, begin

	if (key is pressed(key:Shift) && key is pressed(key:A)) then (
		$1 = "Animation Frame: %d"
		string sprintf(0, 1, get_anim_frame(xgetanimationfirstframe(player_slice),xgetanimationlastframe(player_slice),xgetanimationspeed(player_slice)))
		show string (0)
	)

	if (key is pressed(key:Shift) && key is pressed(key:G)) then (
		$1 = "Player is on ground: %d"
		string sprintf(0, 1, is_player_on_ground)
		show string (0)
	)
	if (key is pressed(key:Shift) && key is pressed(key:J)) then (
		$1 = "Player is jumping: %d"
		string sprintf(0, 1, xisjumping(player_slice))
		show string (0)
	)
	if (key is pressed(key:Shift) && key is pressed(key:F)) then (
		$1 = "Player is falling: %d"
		string sprintf(0, 1, xisjumping(player_slice))
		show string (0)
	)
	if (key is pressed(key:Shift) && key is pressed(key:R)) then (
		$1 = "Player is running: %d"
		string sprintf(0, 1, xisrunning(player_slice))
		show string (0)
	)

	if (key is pressed(key:Shift) && key is pressed(key:I)) then (
		$1 = "Player is idle: %d"
		string sprintf(0, 1, xisidle(player_slice))

		show string (0)
	)
	
	if (key is pressed(key:Shift) && key is pressed(key:Z)) then (
		$1 = "Zone at position: %d"
		#show value (read zone (1, slice x(sl)/20, slice y(sl)/20+1))
		show string (0)
	)
	
	if (key is pressed(key:Shift) && key is pressed(key:N)) then (
		show no value
	)
	if (new keypress(key:Left Bracket)) then (
		$1 = "Debug slowdown decreased: %d"
		debug_slowdown:=debug_slowdown--1 
		string sprintf(0, 1, debug_slowdown)
		show string (0)
	)
	if (new keypress(key:Right Bracket)) then (
		$1 = "Debug slowdown increased: %d"
		debug_slowdown:=debug_slowdown+1 
		string sprintf(0, 1, debug_slowdown)
		show string (0)
	)
	
end
	
	
plotscript, defnewgame, begin
	gameloaded:=0
	ob_size:=setupArrayDefinitions()
	debug_slowdown:=0
	framecount:=1
	init mouse
	suspend player
	#start the game loop
	wait(1)
	enterNewArea
	gameloop
end
